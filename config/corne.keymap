/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/*
 * This is a keymap for Samoklava, a Corne-compatible wireless keyboard. You can use this keymap with a Corne as well.
 * To compile, run these commands:
 *
 *   west build -d build/left -b nice_nano_v2 -- -DSHIELD=corne_left -DZMK_CONFIG='../../samoklava-zmk-config/config'
 *   west build -d build/right -b nice_nano_v2 -- -DSHIELD=corne_right -DZMK_CONFIG='../../samoklava-zmk-config/config'
 *   cp build/left/zephyr/zmk.uf2 ~/Desktop/left.uf2
 *   cp build/right/zephyr/zmk.uf2 ~/Desktop/right.uf2
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    // default
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
    // was 180, default 200
    tapping-term-ms = <200>;
    // when tap before tapping-term-ms expires
    hold-trigger-on-release;
    // this would help with shift+mouseclick by sending preliminary hold until tapping-term-ms expires
    // hold-while-undecided;
    // it will output tap after hold-tap was held but no other key was pressed
    // retro-tap;
};

&lt {
    // default
    flavor = "tap-preferred";
    // was 200
    quick_tap_ms = <180>;
    // was 180, default 200
    tapping-term-ms = <200>;
    // when tap before tapping-term-ms expires
    hold-trigger-on-release;
};


// possible problem with transform:
// for some weird reason the 5x3 transform doesn't quite work for the adjust layer, it needs an extra offset
/* / { */
/*     chosen { */
/*         zmk,matrix_transform = &five_column_transform; */
/*     }; */
/* }; */
            //                 Key positions
            //       0  1  2  3  4    5  6  7  8  9
            //      10 11 12 13 14   15 16 17 18 19
            //      20 21 22 23 24   25 26 27 28 29
            //            30 31 32   33 34 35

/ {
    behaviors {
        //                 Key positions
        //       0  1  2  3  4  5    6  7  8  9 10 11
        //      12 13 14 15 16 17   18 19 20 21 22 23
        //      24 25 26 27 28 29   30 31 32 33 34 35
        //               36 37 38   39 40 41

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            // was tap-preferred, to try: hold-preferred
            flavor = "balanced";
            // for typing quickly
            require-prior-idle-ms = <125>;
            // was 250, default 200
            tapping-term-ms = <250>;
            // for tap-then-hold
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
            // note that this has no actual effect for tap-preffered, only for hold-preferred or balanced
            hold-trigger-key-positions = <
                                         6  7  8  9 10
                       13 14 15 16      18 19 20 21 22
                                        30 31 32 33 34
                             36 37 38   39 40 41
            >;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 19 20 21 22 25 26 27 28 29 36 37 38 39 40 41 18>;

            // <---[[left-hand keys + all homerow mods + all thumbs]]
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lock: lock {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp K_LOCK>;

            tapping-term-ms = <200>;
        };

        lang: lang {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG";
            #binding-cells = <0>;
            bindings = <&lt 2 ENTER>, <&lang_m>;
        };

        F1orF6: F1orF6 {
            compatible = "zmk,behavior-mod-morph";
            label = "F1ORF6";
            bindings = <&kp F1>, <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F2orF7: F2orF7 {
            compatible = "zmk,behavior-mod-morph";
            label = "F2ORF7";
            bindings = <&kp F2>, <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F3orF8: F3orF8 {
            compatible = "zmk,behavior-mod-morph";
            label = "F3ORF8";
            bindings = <&kp F3>, <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F4orF9: F4orF9 {
            compatible = "zmk,behavior-mod-morph";
            label = "F4ORF9";
            bindings = <&kp F4>, <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F5orF10: F5orF10 {
            compatible = "zmk,behavior-mod-morph";
            label = "F5ORF10";
            bindings = <&kp F5>, <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F11orF12: F11orF12 {
            compatible = "zmk,behavior-mod-morph";
            label = "F11ORF12";
            bindings = <&kp F11>, <&kp F12>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 13>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <25 13>;
        };

        backspase {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 22>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <22 34>;
        };

        escJK {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };

        sqbrRT {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
        };

        rsqbrYU {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
        };

        lsqparFG {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        rsqparHJ {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        tabDF {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        mnRcurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
        };

        vbLcurly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 28>;
        };

        cvSPC {
            bindings = <&kp SPACE>;
            key-positions = <27 28>;
        };

        RETcommam {
            bindings = <&kp RET>;
            key-positions = <32 31>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        lang_m: lang_m {
            compatible = "zmk,behavior-macro";
            label = "LANG_M";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q        &kp W        &kp E         &lt 1 R       &kp T               &kp Y              &lt 1 U       &kp I         &kp O            &kp P           &none
&none  &hml LCMD A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &mt LCMD G          &mt RCMD H         &hmr RSHFT J  &hmr RCTRL K  &hmr LEFT_ALT L  &hmr RCMD SEMI  &none
&none  &kp Z        &kp X        &kp C         &lt 2 V       &kp B               &kp N              &lt 2 M       &kp COMMA     &kp DOT          &kp FSLH        &none
                                 &lt 2 SPACE   &lt 1 GRAVE   &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &lt 1 SQT     &lt 2 ENTER
            >;
        };

        lower_layer {
            bindings = <
&none  &kp LA(N1)             &kp LA(N2)         &kp LA(N3)              &kp LA(N4)            &kp LA(N5)               &kp PLUS        &kp N7                     &kp N8                 &kp N9              &kp EQUAL             &none
&none  &hml LCMD EXCLAMATION  &hml LALT AT_SIGN  &hml LEFT_CONTROL HASH  &hml LSHIFT DOLLAR    &mt LCMD PERCENT         &mt RCMD MINUS  &hmr RIGHT_SHIFT NUMBER_4  &hmr RIGHT_CONTROL N5  &hmr LALT NUMBER_6  &hmr RCMD UNDERSCORE  &none
&none  &kp CARET              &kp AMPERSAND      &kp ASTERISK            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp NUMBER_0    &kp NUMBER_1               &kp NUMBER_2           &kp NUMBER_3        &kp BACKSLASH         &none
                                                 &lt 2 K_COPY            &lt 2 K_CUT           &kp K_PASTE              &kp K_UNDO      &lt 2 K_REDO               &lt 2 PIPE
            >;
        };

        raise_layer {
            bindings = <
&none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)    &none       &kp K_SCROLL_DOWN  &kp K_SCROLL_UP      &none            &kp SCROLLLOCK  &none
&none  &kp LCMD          &kp LALT          &kp LCTRL         &kp LSHFT         &F11orF12     &kp LEFT    &hmr RSHFT DOWN    &hmr RCTRL UP_ARROW  &hmr LALT RIGHT  &kp DELETE      &none
&none  &F1orF6           &F2orF7           &F3orF8           &F4orF9           &F5orF10      &kp HOME    &kp PAGE_DOWN      &kp PG_UP            &kp END          &kp INSERT      &none
                                           &lang_m           &lt 1 CAPSLOCK    &caps_word    &kp K_BACK  &lt 1 K_FORWARD    &kp PRINTSCREEN
            >;
        };

        adjust_layer {
            bindings = <
&none  &bt BT_CLR    &none         &none         &none         &soft_off       &kp K_MUTE       &kp K_PREVIOUS  &kp K_PLAY_PAUSE    &kp K_NEXT  &none        &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_UP  &kp C_BRI_UP    &kp K_CONTEXT_MENU  &kp K_LOCK  &none        &none
&none  &bootloader   &to 1         &to 2         &to 3         &none           &kp C_VOL_DN     &kp C_BRI_DN    &none               &none       &bootloader  &none
                                   &none         &none         &none           &none            &none           &none
            >;
        };
    };
};
