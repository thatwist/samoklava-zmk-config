/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * to build locally:
 *   west build -d build/left -b nice_nano_v2 -- -DSHIELD=corne_left -DZMK_CONFIG='../../samoklava-zmk-config/config'
 *   west build -d build/right -b nice_nano_v2 -- -DSHIELD=corne_right -DZMK_CONFIG='../../samoklava-zmk-config/config'
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// docs/keymaps/behaviors/mouse-emulation.md
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15    // default: 10
#include <dt-bindings/zmk/pointing.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define DEFAULT 0
#define CANARY 1
#define SYMBOL 2
#define NAVIGATION 3
//#define MOUSENAV 3
#define MISCELLANEOUS 4
#define DFLT DEFAULT
#define CNR CANARY
#define SYMB SYMBOL
#define NAV NAVIGATION
#define MISC MISCELLANEOUS

&mt {
    // default
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
    // was 180, default 200
    tapping-term-ms = <200>;
    // when tap before tapping-term-ms expires
    // docs: If set, instead of the keys listed in hold-trigger-key-positions producing a tap when pressed before tapping-term-ms expires, they instead produce a tap when released before tapping-term-ms expires.
    // https://zmk.dev/docs/keymaps/behaviors/hold-tap#positional-hold-tap-and-hold-trigger-key-positions
    hold-trigger-on-release;
    // this would help with shift+mouseclick by sending preliminary hold until tapping-term-ms expires
    // hold-while-undecided;
    // it will output tap after hold-tap was held but no other key was pressed
    // retro-tap;
};

&lt {
    // default
    flavor = "tap-preferred";
    // was 200, '-' is new syntax rather than '_' in attributes
    quick-tap-ms = <180>;
    // was 180, default 200
    tapping-term-ms = <200>;
    // when tap before tapping-term-ms expires
    hold-trigger-on-release;
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <1>;
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <0>;
};

// possible problem with transform:
// for some weird reason the 5x3 transform doesn't quite work for the adjust layer, it needs an extra offset
/* / { */
/*     chosen { */
/*         zmk,matrix_transform = &five_column_transform; */
/*     }; */
/* }; */
            //                 Key positions
            //       0  1  2  3  4    5  6  7  8  9
            //      10 11 12 13 14   15 16 17 18 19
            //      20 21 22 23 24   25 26 27 28 29
            //            30 31 32   33 34 35

/ {
    behaviors {
        //                 Key positions
        //       0  1  2  3  4  5    6  7  8  9 10 11
        //      12 13 14 15 16 17   18 19 20 21 22 23
        //      24 25 26 27 28 29   30 31 32 33 34 35
        //               36 37 38   39 40 41

        // interrupt flavors: https://zmk.dev/docs/keymaps/behaviors/hold-tap#interrupt-flavors
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            // was tap-preferred, to try: hold-preferred
            flavor = "balanced";
            // for typing quickly
            require-prior-idle-ms = <125>;
            // was 250, default 200
            tapping-term-ms = <250>;
            // for tap-then-hold
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
            // note that this has no actual effect for tap-preffered, only for hold-preferred or balanced
            hold-trigger-key-positions = <
                                  6  7  8  9 10
                13 14 15 16 17   18 19 20 21 22
                                 30 31 32 33 34
                      36 37 38   39 40 41
            >;
            hold-trigger-on-release;
        };

        hsl: homerow_shift_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <50>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                                  6  7  8  9 10
                13 14 15 16 17   18 19 20 21 22
                                 30 31 32 33 34
                      36 37 38   39 40 41
            >;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                1  2  3  4  5
                13 14 15 16 17   18 19 20 21 22
                25 26 27 28 29
                      36 37 38   39 40 41
            >;
            hold-trigger-on-release;
        };

        hsr: homerow_shift_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <50>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                1  2  3  4  5
                13 14 15 16 17   18 19 20 21 22
                25 26 27 28 29
                      36 37 38   39 40 41
            >;
            hold-trigger-on-release;
        };

        // to hold e.g. q to produce Q
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // nodelabel: nodename, refer by nodelabel while nodelabel is optional it is the only way to refer to the node using phandle &
        // to produce caplock when tap and cap_word when hold more than tapping-term-ms (default 200)
        caps: caps_or_capsword {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // default is hold-preferred
            flavor = "tap-preferred";
            bindings = <&kp>, <&caps_word>;
            // default?
            tapping-term-ms = <200>;
        };

        lock: lock {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp K_LOCK>;
            tapping-term-ms = <200>;
        };

        // tap dance: double tap will produce lang_m, single tap layer2/enter
        lang: lang {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG";
            #binding-cells = <0>;
            bindings = <&lt 2 ENTER>, <&lang_m>;
        };

        COLONorSEMI: COLONorSEMI {
            compatible = "zmk,behavior-mod-morph";
            label = "COLONORSEMI";
            bindings = <&kp COLON>, <&kp SEMI>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F1orF6: F1orF6 {
            compatible = "zmk,behavior-mod-morph";
            label = "F1ORF6";
            bindings = <&kp F1>, <&kp F6>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F2orF7: F2orF7 {
            compatible = "zmk,behavior-mod-morph";
            label = "F2ORF7";
            bindings = <&kp F2>, <&kp F7>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F3orF8: F3orF8 {
            compatible = "zmk,behavior-mod-morph";
            label = "F3ORF8";
            bindings = <&kp F3>, <&kp F8>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F4orF9: F4orF9 {
            compatible = "zmk,behavior-mod-morph";
            label = "F4ORF9";
            bindings = <&kp F4>, <&kp F9>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F5orF10: F5orF10 {
            compatible = "zmk,behavior-mod-morph";
            label = "F5ORF10";
            bindings = <&kp F5>, <&kp F10>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        F11orF12: F11orF12 {
            compatible = "zmk,behavior-mod-morph";
            label = "F11ORF12";
            bindings = <&kp F11>, <&kp F12>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    combos {
        compatible = "zmk,combos";

        capsAQ {
            bindings = <&kp CAPS>;
            key-positions = <1 13>;
        };

        escJK {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
        };

        capswordZA {
            bindings = <&caps_word>;
            key-positions = <25 13>;
        };

        tabDF {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        bspcPCOLONdflt {
            bindings = <&kp BSPC>;
            key-positions = <10 22>;
        };

        // hit both l/r mouse click buttons on nav layer
        mkpmclkPCOLONnav {
            bindings = <&mkp MCLK>;
            key-positions = <10 22>;
            layers = <NAV>;
        };

        delSEMIFSLH {
            bindings = <&kp DEL>;
            key-positions = <22 34>;
        };

        /* now this is occupied by nav layer toggle */
        /* spcCV { */
        /*     bindings = <&kp SPACE>; */
        /*     key-positions = <27 28>; */
        /* }; */

        retCOMMAM {
            bindings = <&kp RET>;
            key-positions = <32 31>;
        };

        lsqbrRT {
            bindings = <&kp LBRKT>;
            key-positions = <4 5>;
        };

        rsqbrYU {
            bindings = <&kp RBRKT>;
            key-positions = <6 7>;
        };

        lsqparFG {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
        };

        rsqparHJ {
            bindings = <&kp RPAR>;
            key-positions = <18 19>;
        };

        rcurlMN {
            bindings = <&kp RBRC>;
            key-positions = <30 31>;
        };

        lcurlVB {
            bindings = <&kp LBRC>;
            key-positions = <29 28>;
        };

        to-default-sd {
            bindings = <&tog CANARY>;
            key-positions = <14 15>;  // sd
        };

        // on/off toggle combo for these two layers
        toggle-canary-kl {
            bindings = <&tog CANARY>;
            key-positions = <20 21>;  // kl
            layers = <DFLT CANARY>;
        };

        toggle-symb-ui {
            bindings = <&tog SYMB>;
            key-positions = <7 8>;  // ui
            layers = <DFLT CANARY SYMB>;
        };

        toggle-symb-er {
            bindings = <&tog SYMB>;
            key-positions = <3 4>;  // er
            layers = <DFLT CANARY SYMB>;
        };

        toggle-nav-cv {
            bindings = <&tog NAV>;
            key-positions = <27 28>;  // cv
            layers = <DFLT CANARY NAV>;
        };

        // m, is occuppied by enter
        toggle-nav-rthumb-m {
            bindings = <&tog NAV>;
            key-positions = <31 41>;  // rthumb+m
            layers = <DFLT CANARY NAV>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYMB NAV>;
            then-layer = <MISC>;
        };
    };

    macros {
        lang_m: lang_m {
            compatible = "zmk,behavior-macro";
            label = "LANG_M";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCMD>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LCMD>;
        };
    };

    // todo:
    //  - sticky layer / sticky key / tapdance to make aka emacs hydra sequences
    //  - toggle layer for browser nav ctrl+tab / ctrl+shift+tab
    //  - sticky/toggle layer for text nav aka vim: arrows / pgup/dn / home / end
    //  - toggle layer for mouse
    //    - &mkp LCLK/RCLK/MCLK
    //    - &mmv MOVE_DOWN/MOVE_UP/MOVE_RIGHT/MOVE_LEFT
    //    - &msc SCRL_DOWN/etc
    //  - layer/sticky for tmux/termux/browser-nav
    //  - try usb logging, output selection for usb logging if needed (adjust layer)
    //  - soft_off - this is actually only needed for some keyboards without power switch
    //  - read all configuration docs
    // notes:
    //  - keycodes: https://zmk.dev/docs/keymaps/list-of-keycodes
    //  - undo/redo/copy/cut/paste are not registered on emacs termux android (TUCPro) but registered on linux i3 as XF86.. and undo/redo registered in emacs
    //  - contextmenu is registered globally on android (TUCPro) - e.g. termux menu works, chrome page menu
    //  - forward/back are registered globally on android (TUCPro) - e.g. chrome page forward/back, termux just goes to home on 'back'
    //  - scrolllock doesn't have effect on android, scrollup/scrolldown essentially work like pgup/pgdn (<prior>/<next> in emacs) but bound to XF86Scroll.. on 
    //  - right alt does't work on android for some reason, for now using left alt only
    keymap {
        compatible = "zmk,keymap";
        default_layer {  // layer 0
            display-name = "qwerty-layer";
            // q w e r t  y u i o p
            // a s d f g  h j k l ;
            // z x c v b  n m , . /
            //   spc ` [  ] ' ret
            bindings = <
&none AS(Q) AS(W) AS(E) &lt SYMB R &kp AS(T)
                        &kp AS(Y) &lt SYMB U &kp I &kp O &kp P &none
&none &hml LCMD A &hml LALT S &hml LCTRL D &hsl LSHFT F &hml LCMD G
                        &hmr RCMD H &hsr RSHFT J &hmr RCTRL K &hmr LALT L &hmr RCMD SEMI &none
&none &kp Z &kp X &kp C &lt NAV V &kp B
                        &kp N &lt NAV M &kp COMMA &kp DOT &kp FSLH &none
      &lt NAV SPACE &lt SYMB GRAVE &kp LBKT
                        &kp RBKT &lt SYMB SQT &lt NAV RET
            >;
        };

        canary_mod_layer {  // layer 1
            display-name = "canary-mod-layer";
            // ` l y p k  z f o u \
            // c r s t g  x   e a i
            // j v m d b  q w , . /
            //     h : -  = ' n
            bindings = <
&none &kp GRAVE &kp L &kp Y &lt SYMB P &kp AS(K)   
                        &kp AS(Z) &lt SYMB F &kp O &kp U &kp BSLH &none
&none &hml LCMD C &hml LALT R &hml LCTRL S &hsl LSHFT T &hml LCMD G
                        &hmr RCMD X &hsr RSHFT SPACE &hmr RCTRL E &hmr LALT A &hmr RCMD I &none
&none &kp J &kp V &kp M &lt NAV D &kp B
                        &kp Q &lt NAV W &kp COMMA &kp DOT &kp FSLH &none
      &lt NAV H &lt SYMB COLON &kp MINUS
                        &kp EQUAL &lt SYMB SQT &lt NAV N
            >;
        };

        symbol_layer {  // layer 2
            display-name = "symbol-layer";
            bindings = <
&none &kp LA(N1) &kp LA(N2) &kp LA(N3) &kp LA(N4) &kp LA(N5)
                          &kp PLUS &kp N7 &kp N8 &kp N9 &kp EQUAL &none
&none &hml LCMD EXCL &hml LALT AT &hml LCTRL HASH &hml LSHFT DLLR &mt LCMD PRCNT
                          &mt RCMD MINUS &hmr RSHFT N4 &hmr RCTRL N5 &hmr LALT N6 &hmr RCMD UNDER &none
&none &kp CARET &kp AMPS &kp ASTRK &none &none
                          &kp N0 &kp N1 &kp N2 &kp N3 &kp BSLH &none
      &mo NAV &mo NAV &none
                          &none &mo NAV &lt NAV PIPE
            >;
        };

        nav_layer {  // layer 3
            display-name = "nav-layer";
            bindings = <
&none &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)
                          &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT &mkp LCLK &none
&none &kp LCMD &kp LALT &kp LCTRL &kp LSHFT &F11orF12
                          &kp LEFT &hmr RSHFT DOWN &hmr RCTRL UP &hmr LALT RIGHT &mkp RCLK &none
&none &F1orF6 &F2orF7 &F3orF8 &F4orF9 &F5orF10
                          &kp HOME &kp PG_DN &kp PG_UP &kp END &kp INS &none
      &none &mo SYMB &none  &kp K_BACK &lt SYMB K_FORWARD &none
            >;
        };

        misc_layer {  // layer 4
            display-name = "misc-layer";
            bindings = <
&none &bt BT_CLR &none &none &none &none
                          &kp K_MUTE &kp K_PREVIOUS &kp K_PLAY_PAUSE &kp K_NEXT &none &none
&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                          &kp C_VOL_UP &kp C_BRI_UP &kp K_CMENU &kp K_LOCK &kp PSCRN &none
&none &bootloader &to DFLT &to CANARY &to SYMB &to NAV
                          &kp C_VOL_DN &kp C_BRI_DN &none &none &bootloader &none
      &none &none &none  &none &none &none
            >;
        };
    };
};
